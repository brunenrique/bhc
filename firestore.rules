
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the current user has one of the allowed roles
    function hasRole(allowedRoles) {
      let userRole = getUserRole(request.auth.uid);
      return request.auth != null && userRole in allowedRoles;
    }

    // Helper function to check if the current user is an admin
    function isAdmin() {
      return hasRole(["admin"]);
    }

    // Helper function to check if the current user is the assigned psychologist
    function isAssignedPsychologist(patientDoc) {
      return request.auth != null && request.auth.uid == patientDoc.data.assignedTo;
    }
    
    // Helper function to check if the user is creating a resource for themselves (e.g. psychologist assigning patient to self)
    function isCreatingForSelf(field) {
      return request.auth != null && request.resource.data[field] == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId; // Users can create their own profile
      allow update: if request.auth.uid == userId || isAdmin(); // Users can update their own, admin can update any
      allow delete: if isAdmin(); // Only admin can delete user documents
    }

    // Patients collection
    match /patients/{patientId} {
      allow read: if hasRole(["admin", "psychologist", "secretary", "scheduling"]); // Secretaries/Schedulers can read for listing purposes
      // More granular read access (e.g., for clinical data) should be checked on the field level or client-side for non-admins/non-assigned-psychologists
      allow create: if isAdmin() || (hasRole(["psychologist"]) && isCreatingForSelf('assignedTo'));
      allow update: if isAdmin() || (hasRole(["psychologist"]) && isAssignedPsychologist(resource) && request.resource.data.assignedTo == resource.data.assignedTo ); // Psychologist can only update their own patients and cannot reassign
      allow delete: if isAdmin() || (hasRole(["psychologist"]) && isAssignedPsychologist(resource));
    }

    // Waiting List collection
    match /waiting_list/{entryId} {
      allow read: if hasRole(["admin", "psychologist", "secretary", "scheduling"]);
      allow create: if hasRole(["admin", "psychologist", "secretary"]) && request.resource.data.criadoPor == request.auth.uid;
      allow update: if hasRole(["admin", "psychologist", "scheduling"]); // Admin, psychologist, or scheduler can update status (e.g., to 'agendado')
      allow delete: if hasRole(["admin", "psychologist", "scheduling"]); // Admin, psychologist, or scheduler can remove
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if hasRole(["admin", "psychologist", "secretary", "scheduling"]); // All relevant roles can see session data for calendar
      allow create: if hasRole(["admin", "psychologist", "scheduling"]); // Admin, Psy, or Scheduler can create
      allow update: if hasRole(["admin", "psychologist", "scheduling"]); // Admin, Psy, or Scheduler can update (e.g., status)
      allow delete: if hasRole(["admin", "psychologist"]); // Only Admin or Psy should delete sessions
    }

    // Assessments collection
    match /assessments/{assessmentId} {
      allow read, write: if hasRole(["admin", "psychologist"]); // Simplified: only Admin or Psychologist
      // TODO: Add more granular rules (e.g., psychologist can only manage assessments for their assigned patients)
    }
    
    // Documents collection
    match /documents/{documentId} {
      allow read, write: if hasRole(["admin", "psychologist", "secretary"]); // Simplified
      // TODO: Add more granular rules
    }
    
    // Admin Metrics (Example - assuming a collection for this)
    match /admin_metrics/{metricId} {
        allow read, write: if isAdmin();
    }
  }
}

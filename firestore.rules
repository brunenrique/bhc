
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function hasRole(roleName) {
      return isSignedIn() && request.auth.token.role == roleName;
    }

    function isAdmin() {
      return hasRole('Admin');
    }

    function isPsychologist() {
      return hasRole('Psychologist');
    }

    function isSecretary() {
      return hasRole('Secretary');
    }

    function isStaff() {
      return isAdmin() || isPsychologist() || isSecretary();
    }
    // Allow public read access to a specific document
    // (e.g., a public profile)
    // match /users/{userId} {
    //   allow read: if true;
    //   allow write: if request.auth.uid == userId;
    // }

    // Default deny all reads and writes
    // match /{document=**} {
    //  allow read, write: if false;
    // }

    // Rules for user documents, allowing users to manage their own data
    // and admins to manage all user data.
    match /users/{userId} {
      allow read: if isStaff();
      allow write: if request.auth.uid == userId || isAdmin();
    }

    match /patients/{id} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    // Chat messages
    // Only authenticated users can read/write messages within a specific chat.
    match /chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.text is string &&
                       request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1000 && // Max message length
                       request.resource.data.senderName is string &&
                       request.resource.data.timestamp == request.time;
      // Update/Delete can be added later if needed
      // allow update, delete: if request.auth.uid == resource.data.senderId; // Example: only sender can delete/update
    }

    // Assessments
    // Documents representing an evaluation assigned to a patient.
    match /assessments/{assessmentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                      request.resource.data.patientId is string &&
                      request.resource.data.assignedBy is string &&
                      request.resource.data.status in ['assigned', 'in-progress', 'completed'];
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.token.role == 'Admin';
    }

    // Catch-all for any other paths - explicitly deny to be safe
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

rules\_version = '2';

service cloud.firestore {
match /databases/{database}/documents {

```
// --- Funções de Apoio (Helpers) ---

function isSignedIn() {
  return request.auth != null;
}

function hasRole(roleName) {
  return isSignedIn() &&
         request.auth.token.role != null &&
         request.auth.token.role.lower() == roleName.lower();
}

function isAdmin() { return hasRole('Admin'); }
function isPsychologist() { return hasRole('Psychologist'); }
function isSecretary() { return hasRole('Secretary'); }
function isStaff() { return isAdmin() || isPsychologist() || isSecretary(); }

function validEncryptedField(field) {
  return field.keys().hasOnly(['ciphertext', 'iv', 'tag']) &&
         field.ciphertext is string &&
         field.iv is string &&
         field.tag is string;
}

function validPatient() {
  return request.resource.data.keys().hasOnly([
           'ownerId', 'name', 'birthdate', 'phoneEnc', 'addressEnc', 'identifierEnc', 'email', 'notes'
         ]) &&
         request.resource.data.ownerId is string &&
         request.resource.data.name is string &&
         request.resource.data.email is string &&
         (!('birthdate' in request.resource.data) || request.resource.data.birthdate is timestamp) &&
         (!('phoneEnc' in request.resource.data) || validEncryptedField(request.resource.data.phoneEnc)) &&
         (!('addressEnc' in request.resource.data) || validEncryptedField(request.resource.data.addressEnc)) &&
         (!('identifierEnc' in request.resource.data) || validEncryptedField(request.resource.data.identifierEnc));
}

function validAssessmentStatus(status) {
  return status in ['assigned', 'in-progress', 'completed'];
}

function patientOwnedByUser(patientId) {
  return exists(/databases/$(database)/documents/patients/$(patientId))
    ? get(/databases/$(database)/documents/patients/$(patientId)).data.ownerId == request.auth.uid
    : true;
}

function validSessionNote() {
  return request.resource.data.keys().hasOnly(['patientId', 'data', 'createdAt', 'ownerId']) &&
         request.resource.data.patientId is string &&
         request.resource.data.ownerId is string &&
         request.resource.data.createdAt is timestamp &&
         request.resource.data.data.keys().hasOnly(['ciphertext', 'iv', 'tag']) &&
         request.resource.data.data.ciphertext is string &&
         request.resource.data.data.iv is string &&
         request.resource.data.data.tag is string;
}

function validQuickNote() {
  return request.resource.data.keys().hasOnly(['ownerId','patientId','text','title','linkedCardId','createdAt']) &&
         request.resource.data.ownerId is string &&
         request.resource.data.patientId is string &&
         request.resource.data.text is string &&
         (!('title' in request.resource.data) || request.resource.data.title is string) &&
         (!('linkedCardId' in request.resource.data) || request.resource.data.linkedCardId is string) &&
         request.resource.data.createdAt is timestamp;
}

// --- Regras por Coleção ---

  match /appointments/{id} {
    // Psicólogos e secretários podem registrar novos agendamentos
    allow create: if ((isPsychologist() || isSecretary()) && request.auth.uid == request.resource.data.psychologistId) || isAdmin();
    // Todos os membros da equipe podem visualizar agendas
    allow read: if isAdmin() || isPsychologist() || isSecretary();
    // Apenas o psicólogo responsável pode alterar ou excluir
    allow update, delete: if (isPsychologist() && request.auth.uid == resource.data.psychologistId) || isAdmin();
  }

match /assessments/{assessmentId} {
  allow read: if isAdmin() ||
                  resource.data.assignedBy == request.auth.uid ||
                  resource.data.patientId == request.auth.uid;
  allow create: if isStaff() &&
                  request.resource.data.assignedBy == request.auth.uid &&
                  request.resource.data.patientId is string &&
                  patientOwnedByUser(request.resource.data.patientId) &&
                  validAssessmentStatus(request.resource.data.status);
  allow update: if (isAdmin() || request.auth.uid == resource.data.assignedBy) &&
                  request.resource.data.patientId == resource.data.patientId &&
                  request.resource.data.assignedBy == resource.data.assignedBy &&
                  patientOwnedByUser(request.resource.data.patientId) &&
                  validAssessmentStatus(request.resource.data.status);
  allow delete: if isAdmin();
}

match /backupSettings/{id} {
  allow read, write: if isAdmin();
}

match /backups/{id} {
  allow read, create: if isAdmin();
}

match /chats/{chatId} {
  function participantCountOK() { return request.resource.data.participants.size() <= 10; }
  function usersExist() {
    for (id in request.resource.data.participants.keys()) {
      if !exists(/databases/$(database)/documents/users/$(id)) { return false; }
    }
    return true;
  }
  allow create: if isSignedIn() &&
                  request.resource.data.participants[request.auth.uid] == true &&
                  participantCountOK() && usersExist();
  allow read: if isSignedIn() && request.auth.uid in resource.data.participants;

  match /messages/{messageId} {
    allow read: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true;
    allow create: if isSignedIn() &&
                    get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true &&
                    request.resource.data.senderId == request.auth.uid &&
                    request.resource.data.text is string && request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1000 &&
                    request.resource.data.senderName is string &&
                    request.resource.data.timestamp == request.time;
    allow delete: if isAdmin() || request.auth.uid == resource.data.senderId;
  }
}

  match /patients/{id} {
    // Somente o psicólogo responsável pode criar e gerenciar seus pacientes
    allow create: if (isPsychologist() && request.resource.data.ownerId == request.auth.uid && validPatient()) || isAdmin();
    allow read, update, delete: if (isPsychologist() && request.auth.uid == resource.data.ownerId) || isAdmin();
    allow list: if isPsychologist() || isAdmin();
  }

  match /sessionNotes/{noteId} {
    // Notas de sessão são restritas ao psicólogo responsável
    allow read, create, update, delete: if (isPsychologist() && resource.data.ownerId == request.auth.uid) || isAdmin();
  }

match /quickNotes/{id} {
  allow create: if isStaff() && request.resource.data.ownerId == request.auth.uid && validQuickNote();
  allow read, update, delete: if isStaff() && resource.data.ownerId == request.auth.uid;
}

match /patients/{patientId}/clinicalTabs/{tabId} {
  allow read, write: if isStaff() && patientOwnedByUser(patientId);
}

match /groups/{id} {
  allow read: if isStaff();
  allow create: if (isPsychologist() && request.auth.uid == request.resource.data.psychologistId) || isAdmin();
  allow update, delete: if (isPsychologist() && request.auth.uid == resource.data.psychologistId) || isAdmin();
}

match /tasks/{id} {
  allow read, update: if isStaff();
  allow create, delete: if isAdmin();
}

match /schedules/{id} {
  allow read, write: if isStaff();
}

match /users/{userId} {
  allow get: if isStaff() || request.auth.uid == userId;
  allow list: if isAdmin();
  allow create: if (request.auth.uid == userId &&
                  request.resource.data.keys().hasOnly(['role', 'isApproved', 'name', 'email']) &&
                  request.resource.data.role in ['Psychologist', 'Secretary']) || isAdmin();
  allow update: if (request.auth.uid == userId && request.resource.data.keys().hasOnly(['name'])) || isAdmin();
  allow delete: if isAdmin();

  match /fcmTokens/{tokenId} {
    allow create: if request.auth.uid == userId && request.resource.data.keys().hasOnly(['token','createdAt']);
    allow delete: if request.auth.uid == userId;
  }

  match /notifications/{notifId} {
    allow create: if request.auth.uid == userId &&
                     request.resource.data.keys().hasAll(['type','message','date', 'isRead']) &&
                     request.resource.data.date is timestamp;
    allow read, update, delete: if request.auth.uid == userId;
  }
}

match /waitingList/{id} {
  allow read, update: if isStaff();
  allow create, delete: if isAdmin();
}

match /auditLogs/{id} {
  allow create: if isSignedIn();
  allow read: if isAdmin();
  allow update, delete: if false;
}

match /{document=**} {
  allow read, write: if false;
}
```

}
}

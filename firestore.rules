rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Funções seguras (só com request.auth)
    function isSignedIn() {
      return request.auth != null;
    }

    function hasRole(roleName) {
      return isSignedIn() && request.auth.token.role == roleName;
    }

    function isAdmin() {
      return hasRole('Admin');
    }

    function isPsychologist() {
      return hasRole('Psychologist');
    }

    function isSecretary() {
      return hasRole('Secretary');
    }

    function isStaff() {
      return isAdmin() || isPsychologist() || isSecretary();
    }

    function validPatient() {
      return request.resource.data.keys().hasAll(['ownerId', 'name', 'birthdate']) &&
             request.resource.data.ownerId is string &&
             request.resource.data.name is string &&
             request.resource.data.birthdate is timestamp;
    }

    function validAssessmentStatus(status) {
      return status in ['assigned', 'in-progress', 'completed'];
    }

    // Users
    match /users/{userId} {
      allow get: if isStaff() || request.auth.uid == userId;
      allow list: if isAdmin();
      allow create: if request.auth.uid == userId || isAdmin();
      allow update: if (request.auth.uid == userId &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.isApproved == resource.data.isApproved)
                     || isAdmin();
      allow delete: if isAdmin();
    }

    // Patients
    match /patients/{id} {
      allow create: if isSignedIn() &&
                      request.resource.data.ownerId == request.auth.uid &&
                      validPatient();

      allow read: if isStaff() ||
                     (isSignedIn() && resource.data.ownerId == request.auth.uid);

      allow update: if isStaff() ||
                       (isSignedIn() &&
                        resource.data.ownerId == request.auth.uid &&
                        request.resource.data.ownerId == resource.data.ownerId);

      allow delete: if isAdmin() ||
                       (isSignedIn() && resource.data.ownerId == request.auth.uid);
    }

    // Chats
    match /chats/{chatId} {
      allow create: if isSignedIn() &&
                      request.resource.data.participants[request.auth.uid] == true;
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
    }

    // Chat messages
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isSignedIn() &&
        get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true;

      allow create: if isSignedIn() &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.text is string &&
        request.resource.data.text.size() > 0 &&
        request.resource.data.text.size() < 1000 &&
        request.resource.data.senderName is string &&
        request.resource.data.timestamp == request.time;
    }

    // Assessments
    match /assessments/{assessmentId} {
      allow read: if isAdmin() ||
                     resource.data.assignedBy == request.auth.uid ||
                     resource.data.patientId == request.auth.uid;

      allow create: if isStaff() &&
                      request.resource.data.assignedBy == request.auth.uid &&
                      request.resource.data.patientId is string &&
                      validAssessmentStatus(request.resource.data.status);

      allow update: if (isAdmin() || request.auth.uid == resource.data.assignedBy) &&
                       request.resource.data.patientId == resource.data.patientId &&
                       request.resource.data.assignedBy == resource.data.assignedBy &&
                       validAssessmentStatus(request.resource.data.status);

      allow delete: if isAdmin();
    }

    // Catch-all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
